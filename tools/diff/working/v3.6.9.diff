diff --git a/packages/strapi/lib/Strapi.js b/packages/strapi/lib/Strapi.js
index e1159f47c..7d426cf9b 100644
--- a/packages/strapi/lib/Strapi.js
+++ b/packages/strapi/lib/Strapi.js
@@ -25,7 +25,7 @@ const { createCoreStore, coreStoreModel } = require('./services/core-store');
 const createEntityService = require('./services/entity-service');
 const entityValidator = require('./services/entity-validator');
 const createTelemetry = require('./services/metrics');
-const createUpdateNotifier = require('./utils/update-notifier');
+// [PK] removed update-notifier
 const ee = require('./utils/ee');
 
 const LIFECYCLES = {
@@ -71,7 +71,7 @@ class Strapi {
 
     this.requireProjectBootstrap();
 
-    createUpdateNotifier(this).notify();
+    // [PK] removed update-notifier
   }
 
   get EE() {
@@ -259,12 +259,7 @@ class Strapi {
       // Get database clients
       const databaseClients = _.map(this.config.get('connections'), _.property('settings.client'));
 
-      // Emit started event.
-      await this.telemetry.send('didStartServer', {
-        database: databaseClients,
-        plugins: this.config.installedPlugins,
-        providers: this.config.installedProviders,
-      });
+      // [PK] removed telemetry
 
       if (cb && typeof cb === 'function') {
         cb();
@@ -317,6 +312,8 @@ class Strapi {
   }
 
   async load() {
+    // [PK] /_health router only when development
+    this.config.environment === 'development' &&
     this.app.use(async (ctx, next) => {
       if (ctx.request.url === '/_health' && ['HEAD', 'GET'].includes(ctx.request.method)) {
         ctx.set('strapi', 'You are so French!');


diff --git a/packages/strapi/lib/commands/build.js b/packages/strapi/lib/commands/build.js
index 07ac1328a..8822c8649 100644
--- a/packages/strapi/lib/commands/build.js
+++ b/packages/strapi/lib/commands/build.js
@@ -17,7 +17,7 @@ module.exports = async ({ clean, optimization }) => {
 
   const { serverUrl, adminPath } = getConfigUrls(config.get('server'), true);
 
-  console.log(`Building your admin UI with ${green(config.environment)} configuration ...`);
+  console.log(`Building your admin UI... server url: ${green(serverUrl)}, adminPath: ${green(adminPath)}`);
 
   if (clean) {
     await strapiAdmin.clean({ dir });
diff --git a/packages/strapi/lib/commands/develop.js b/packages/strapi/lib/commands/develop.js
index 5a9fb1e20..4e70d98bd 100644
--- a/packages/strapi/lib/commands/develop.js
+++ b/packages/strapi/lib/commands/develop.js
@@ -25,7 +25,8 @@ module.exports = async function({ build, watchAdmin, polling, browser }) {
   // Don't run the build process if the admin is in watch mode
   if (build && !watchAdmin && serveAdminPanel && !buildExists) {
     try {
-      execa.shellSync('npm run -s build -- --no-optimization', {
+       // [PK] change script name
+      execa.shellSync('npm run -s build:admin -- --no-optimization', {
         stdio: 'inherit',
       });
     } catch (err) {
diff --git a/packages/strapi/lib/core/app-configuration/index.js b/packages/strapi/lib/core/app-configuration/index.js
index 8abff52d5..0c93079bb 100644
--- a/packages/strapi/lib/core/app-configuration/index.js
+++ b/packages/strapi/lib/core/app-configuration/index.js
@@ -3,12 +3,14 @@
 const os = require('os');
 const path = require('path');
 const _ = require('lodash');
-const dotenv = require('dotenv');
-
-dotenv.config({ path: process.env.ENV_PATH });
-
+// [PK] replace .env
 process.env.NODE_ENV = process.env.NODE_ENV || 'development';
-
+require("dotenv").config({
+  path: process.env.NODE_ENV === "production" ? ".env"
+  : require("fs").existsSync(`.env.${process.env.NODE_ENV}.local`) 
+  ? `.env.${process.env.NODE_ENV}.local` : `.env.${process.env.NODE_ENV}`
+});
+  
 const getPrefixedDeps = require('../../utils/get-prefixed-dependencies');
 const loadPolicies = require('../load-policies');
 const loadFunctions = require('../load-functions');
@@ -75,7 +77,7 @@ module.exports = (dir, initialConfig = {}) => {
     autoReload,
     environment: process.env.NODE_ENV,
     uuid: _.get(pkgJSON, 'strapi.uuid'),
-    packageJsonStrapi: _.omit(_.get(pkgJSON, 'strapi', {}), 'uuid'),
+    // [PK] removed useless codes ==>
     info: {
       ...pkgJSON,
       strapi: strapiVersion,
diff --git a/packages/strapi/lib/middlewares/logger/index.js b/packages/strapi/lib/middlewares/logger/index.js
index 72d0a0aa8..71e3b7543 100644
--- a/packages/strapi/lib/middlewares/logger/index.js
+++ b/packages/strapi/lib/middlewares/logger/index.js
@@ -55,7 +55,14 @@ module.exports = strapi => {
           const start = Date.now();
           await next();
           const delta = Math.ceil(Date.now() - start);
-          strapi.log.debug(`${ctx.method} ${ctx.url} (${delta} ms) ${codeToColor(ctx.status)}`);
+
+          // [PK] print user.id and body of req/res
+          const userId = ctx.state && ctx.state.user && ctx.state.user.id;
+          strapi.log.debug(`${codeToColor(ctx.status)} ${ctx.method} ${ctx.url} (${delta} ms) > ${userId ? chalk.gray(userId) : ''}`);
+          if (strapi.log.levelVal <= 10) { // trace
+            if (ctx.request.length > 0) strapi.log.trace('req body:', ctx.request.body);
+            if (ctx.response.body) strapi.log.trace('res body:', ctx.response.body);
+          }
         });
       }
     },
diff --git a/packages/strapi/lib/middlewares/public/index.html b/packages/strapi/lib/middlewares/public/index.html
index 6faa0d75f..ae0eecca3 100644
--- a/packages/strapi/lib/middlewares/public/index.html
+++ b/packages/strapi/lib/middlewares/public/index.html
@@ -15,7 +15,7 @@
   </head>
   <body lang="en">
     <section class="wrapper">
-      <h1><img class="logo" src="<%= strapi.config.server.url %>/assets/images/logo_login.png" /></h1>
+      <h2><%= strapi.config.info.name %></h2>
       <% if (strapi.config.environment === 'development' && isInitialised) { %>
         <div class="informations">
           <div>
@@ -36,11 +36,7 @@
           <h2>Let's get started!</h2>
           <p>To discover the power provided by Strapi, you need to create an administrator.</p>
           <a class="cta cta-secondary" href="<%= strapi.config.admin.url %>" target="_blank" title="Click to create the first administration" ><i class="fas fa-external-link-alt"></i>Create the first administrator</a>
-          <div class="people-saying-hello">
-            <img class="visible" src="<%= strapi.config.server.url %>/assets/images/group_people_1.png" alt="People saying hello" />
-            <img src="<%= strapi.config.server.url %>/assets/images/group_people_2.png" alt="People saying hello" />
-            <img src="<%= strapi.config.server.url %>/assets/images/group_people_3.png" alt="People saying hello" />
-          </div>
+          <!--[PK] remove useless part-->
         </div>
       <% } else { %>
         <div class="informations">
diff --git a/packages/strapi/lib/middlewares/public/index.js b/packages/strapi/lib/middlewares/public/index.js
index 215b4c0e3..b4a67dd7a 100644
--- a/packages/strapi/lib/middlewares/public/index.js
+++ b/packages/strapi/lib/middlewares/public/index.js
@@ -81,18 +81,19 @@ module.exports = strapi => {
       if (!strapi.config.serveAdminPanel) return;
 
       const buildDir = path.resolve(strapi.dir, 'build');
-      const serveAdmin = ctx => {
-        ctx.type = 'html';
-        ctx.body = fs.createReadStream(path.join(buildDir + '/index.html'));
-      };
+      // [PK] fix prefix-url issue
+      // main router already has a prefix. so add a path w/o url prefix for static file service
+      const adminPathWoPrefix = strapi.config.admin.path.replace(strapi.config.get('middleware.settings.router.prefix', ''), '');
 
       strapi.router.get(
-        `${strapi.config.admin.path}/*`,
+        `${adminPathWoPrefix}/*`,
         serveStatic(buildDir, { maxage: maxAge, defer: false, index: 'index.html' })
       );
 
-      strapi.router.get(`${strapi.config.admin.path}`, serveAdmin);
-      strapi.router.get(`${strapi.config.admin.path}/*`, serveAdmin);
+      strapi.router.get(`${adminPathWoPrefix}*`, ctx => {
+        ctx.type = 'html';
+        ctx.body = fs.createReadStream(path.join(buildDir + '/index.html'));
+      });
     },
   };
 };
diff --git a/packages/strapi/lib/middlewares/router/index.js b/packages/strapi/lib/middlewares/router/index.js
index d4f82d363..ba22ccbe7 100644
--- a/packages/strapi/lib/middlewares/router/index.js
+++ b/packages/strapi/lib/middlewares/router/index.js
@@ -29,7 +29,8 @@ module.exports = strapi => {
 
       if (_.has(strapi.admin, 'config.routes')) {
         const router = new Router({
-          prefix: '/admin',
+          // [PK] fix prefix-url issue
+          prefix: `${strapi.config.get('middleware.settings.router.prefix', '')}/admin`,
         });
 
         _.get(strapi.admin, 'config.routes', []).forEach(route => {
@@ -44,7 +45,8 @@ module.exports = strapi => {
         // Parse each plugin's routes.
         _.forEach(strapi.plugins, (plugin, pluginName) => {
           const router = new Router({
-            prefix: `/${pluginName}`,
+            // [PK] fix prefix-url issue
+            prefix: `${strapi.config.get('middleware.settings.router.prefix', '')}/${pluginName}`,
           });
 
           (plugin.config.routes || []).forEach(route => {

